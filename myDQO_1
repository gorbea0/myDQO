import serial   
import time
import calendar
import datetime
#from datetime import datetime, date, time, timedelta
import os
from tkcalendar import DateEntry    
import sqlite3
from tkinter import *
from tkinter import messagebox
import tkinter.ttk as ttk
#import tkinter as tk
from tkinter import simpledialog
#imports para treeview
import threading
import numpy as np
from matplotlib import pyplot as plt

hoy=time.strftime("%d/%m/%Y")
root=Tk()
root.title("Control de la temperatura en ensayos de DQO")
root.geometry("1000x640")
root.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')


flag="stop"


############################################################################################

def arduino():
  global hora
  global sTemp
  lectura = serial.Serial('COM3',9600)
  lectura.timeout = 1
  # provocar reseteo manual de la placa para leer desde el principio , necesario en Linux
  lectura.setDTR(False) 
  time.sleep(1)
  lectura.flushInput()
  lectura.setDTR(True)

  while True:     #sArduino = PuertoSerie.read(PuertoSerie.inWaiting())
    time.sleep(intervalomedida)
    try:
      sArduino = lectura.readline()
      sArduino = sArduino.strip()
      sArduino=str(sArduino)
      sHumedad, sTemp, sFin = sArduino.split("|", 2) 
      tiempo = time.time()
      fecha = time.ctime(tiempo)
      #print (sTemp) 
      hora=time.strftime("%H:%M:%S")
      #print(hora)
      #Label1.relleno.set=("hola")
      #tree.insert('', 'end', values=(hora,sTemp))
      
    except:
      sTemp=1000
      messagebox.askquestion("Error", "Se ha desconectado el Arduino")   
      break 


def refrescar():
  global daysToCalibrate
  global rangosu
  global rangoin
  global factCober
  global intervalomedida
  global duraciondqo
  #global tiempomedidaCN
  #global tempdqo
  global tempcn
  global tempokDQO
  global toleranciaDQO
  global toleranciaCN
  global estadoSensor
  global factorMatSusp
  global factor150
  global uMatSusp
  global u150
  global fechaUltimaCalibracion
  global miId
  global duracionCN
  #global tiempomedidaDQO

  #leemos los datos de la base de datos para la aplicacion general
  conexion=sqlite3.connect("D:\\tempcontrol.db")
  cursorConfig=conexion.cursor()
  cursorHistorial=conexion.cursor()
  cursorCalibracion=conexion.cursor()
  cursorUltimaCaliFecha=conexion.cursor()
  cursorEnsayos=conexion.cursor()
  try:
    cursorConfig.execute("SELECT * FROM config")
    cursorHistorial.execute("SELECT estado FROM historial WHERE fecha=(SELECT MAX(fecha) FROM historial)")
    hoy_c=str(datetime.datetime.strftime(datetime.datetime.strptime(hoy,"%d/%m/%Y"),"%Y-%m-%d"))
    #hoy_c lo transformo en formato año-mes-dia
    cursorCalibracion.execute("SELECT * FROM calibracion where fecha=(SELECT MAX(fecha) from  (SELECT * from calibracion  WHERE fecha <='"+str(hoy_c)+"'))") 
    cursorUltimaCaliFecha.execute("SELECT MAX(fecha) from calibracion")
    cursorEnsayos.execute("SELECT Id FROM ensayos WHERE Id=(SELECT MAX(Id) FROM ensayos) order by Id")
    conexion.commit()
    preferencias=cursorConfig.fetchall()
    for b in preferencias:
       daysToCalibrate=b[0]
       rangosu=b[1]
       rangoin=b[2]
       factCober=b[3]
       intervalomedida=b[4]
       duraciondqo=b[5]
       duracionCN=b[6]
       tempokDQO=b[7]
       tempcn=b[8]
       toleranciaDQO=b[9]
       toleranciaCN=b[10]
    
    listadoHistorial=cursorHistorial.fetchall()
    for est in listadoHistorial:
      estadoSensor=est[0]   # antes 0
    
    CalibracionActual=cursorCalibracion.fetchall()
    for factor in CalibracionActual:
      factor150=factor[5]
      factorMatSusp=factor[4]
      uMatSusp=factor[6]
      u150=factor[7]
      
    FechaUlCal=cursorUltimaCaliFecha.fetchall()
    
    for x in FechaUlCal:
      fechaUltimaCalibracion=x[0]

    listadoEnsayos=cursorEnsayos.fetchall()
    for x in listadoEnsayos:
      miId=x[0]
      #print("miId "+str(miId))

  except:
    messagebox.showerror("Error","No se puede leer la base de datos!!")
  finally:
    cursorConfig.close()
    cursorHistorial.close()
    cursorCalibracion.close()
    cursorUltimaCaliFecha.close()
    cursorEnsayos.close()
    conexion.close()
####################################################################################################


def certificado():
  #os.popen('a.pdf')
  promp=os.system('start SumatraPDF D:FichaSensorDQO.pdf')

def digestor():
  #os.popen('a.pdf')
  promp=os.system('start SumatraPDF D:hach.pdf')


def pnt():
  #os.popen('a.pdf')
  promp=os.system('start SumatraPDF D:pntdqo.pdf')



####################################################################################################  

refrescar()

####################################################################################################

def muestraEnsayos():
  refrescar()
  ventanaEnsayos=Toplevel(root)
  ventanaEnsayos.config(cursor="hand2")
  ventanaEnsayos.geometry("850x400")
  ventanaEnsayos.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaEnsayos.title("Listado de ensayos")

  campos=Frame(ventanaEnsayos)
  campos.pack()

  tipoLabel=Label(campos, text="Fecha de la última calibración: "+datetime.datetime.strftime(datetime.datetime.strptime(fechaUltimaCalibracion,"%Y-%m-%d"),"%d-%m-%Y"))
  tipoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  estadoLabel=Label(campos, text="Estado del sensor actualmente "+estadoSensor)
  estadoLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  f150Label=Label(campos, text="Factor corrector DQO a fecha de hoy: "+str(factor150))
  f150Label.grid(row=2, column=0, sticky="e", padx=10, pady=5)
  

  def eliminar():
    valor ="not"
    #elimina datos en BBDD de cada ensayo
    IdSeleccionada=0
    try:
      IdSeleccionada=tree.item(tree.selection())['values'][0]
    except:
      messagebox.showerror("Error","Debes seleccionar primero el registro a eliminar en la tabla de abajo")  
    if IdSeleccionada !=0:
      valor=messagebox.askquestion("Aviso", "Deseas borrar de verdad? Se borrarán también el registro de temperaturas asociado")
      if valor=="yes": # and answ is not None:
        miconexion=sqlite3.connect("D:\\tempcontrol.db")
        micursor=miconexion.cursor() 
        miconexion.commit()
      
        try:
          micursor.execute("DELETE FROM temperaturas WHERE Id="+str(IdSeleccionada))
          micursor.execute("DELETE FROM ensayos WHERE Id="+str(IdSeleccionada))
          miconexion.commit() 
          messagebox.showinfo("Atencion","Registro "+str(IdSeleccionada)+" eliminado con exito")       
        except:
          messagebox.showerror("Atencion","Error") 
        finally:
          micursor.close()
          miconexion.close()
      else:
        messagebox.showerror("Atencion","Cancelado")   

  botonera=Frame(ventanaEnsayos)
  botonera.pack()
  botonparar=Button(botonera, text="Eliminar registro", command=eliminar)
  botonparar.grid(row=1, column=0, sticky="e", padx=10, pady=10)

  def cierra():
    ventanaEnsayos.destroy()
    
  botonEdit=Button(botonera, text="Editar ensayo", command= lambda : ventanaEditarEnsayos(tree.item(tree.selection())['values'][0]))
  botonEdit.grid(row=1, column=4, sticky="e", padx=10, pady=10)


  botonDatos=Button(botonera, text="Ver datos ensayo", command= lambda : ventanaDatosEnsayo(tree.item(tree.selection())['values'][0]))
  botonDatos.grid(row=1, column=5, sticky="e", padx=10, pady=10)
  botonVerTemp=Button(botonera, text="Ver temperaturas", command= lambda : muestraTemperaturas(tree.item(tree.selection())['values'][0]))
  botonVerTemp.grid(row=1, column=6, sticky="e", padx=10, pady=10)

  botonCerrar=Button(botonera, text="Cerrar", command=cierra)
  botonCerrar.grid(row=1, column=7, sticky="e", padx=10, pady=10)

  Right = Frame(ventanaEnsayos, width=500, height=350, bd=8, relief="raise")
  Right.pack(side=RIGHT)
  scrollbary = Scrollbar(Right, orient=VERTICAL)
  scrollbarx = Scrollbar(Right, orient=HORIZONTAL)
  tree = ttk.Treeview(Right, columns=("Id", "malas","tipo","fecha", "sensor","cubeta", "lims1","lims2","lims3","lims4","lims5","lims6","lims7","lims8","lims9", "control", "analista", "observaciones"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=tree.yview)
  scrollbary.pack(side=RIGHT, fill=Y)
  scrollbarx.config(command=tree.xview)
  scrollbarx.pack(side=BOTTOM, fill=X)
  tree.heading('Id', text="Id", anchor=W)
  tree.heading('malas', text="malas", anchor=W)
  tree.heading('tipo', text="tipo", anchor=W)
  tree.heading('fecha', text="fecha", anchor=W)
  tree.heading('sensor', text="sensor", anchor=W)
  tree.heading('cubeta', text="cubeta", anchor=W)
  tree.heading('lims1', text="lims1", anchor=W)
  tree.heading('lims2', text="lims2", anchor=W)
  tree.heading('lims3', text="lims3", anchor=W)
  tree.heading('lims4', text="lims4", anchor=W)
  tree.heading('lims5', text="lims5", anchor=W)
  tree.heading('lims6', text="lims6", anchor=W)
  tree.heading('lims7', text="lims7", anchor=W)
  tree.heading('lims8', text="lims8", anchor=W)
  tree.heading('lims9', text="lims9", anchor=W)
  tree.heading('control', text="control", anchor=W)
  tree.heading('analista', text="analista", anchor=W)
  tree.heading('observaciones', text="observaciones", anchor=W)

  tree.column('#0', stretch=NO, minwidth=40, width=40)
  tree.column('#1', stretch=NO, minwidth=40, width=40)
  tree.column('#2', stretch=NO, minwidth=12, width=45)
  tree.column('#3', stretch=NO, minwidth=5, width=45)
  tree.column('#4', stretch=NO, minwidth=0, width=150)
  tree.column('#5', stretch=NO, minwidth=0, width=120)
  tree.column('#6', stretch=NO, minwidth=0, width=120)
  tree.column('#7', stretch=NO, minwidth=0, width=200)
  tree.column('#8', stretch=NO, minwidth=0, width=120)
  tree.column('#9', stretch=NO, minwidth=0, width=200)
  tree.column('#10', stretch=NO, minwidth=0, width=50)
  tree.column('#11', stretch=NO, minwidth=0, width=40)
  tree.column('#12', stretch=NO, minwidth=0, width=80)
  tree.column('#13', stretch=NO, minwidth=0, width=45)
  tree.column('#14', stretch=NO, minwidth=0, width=150)
  tree.column('#15', stretch=NO, minwidth=0, width=120)
  tree.column('#16', stretch=NO, minwidth=0, width=120) 
  tree.column('#17', stretch=NO, minwidth=0, width=120) 

  tree.pack()

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()

  micursor.execute("SELECT * from ensayos order by Id desc")
  miconexion.commit()
  datos=micursor.fetchall()
  tree.delete(*tree.get_children())
  
  for row in datos:
      
      if row[18] is None or row[19] is None:
        malas="?"
      else:
        malas=int(row[18])+int(row[19])
      tree.insert('', 'end', values=(row[0],str(malas),row[1], datetime.datetime.strftime(datetime.datetime.strptime(row[2],"%Y-%m-%d"),"%d-%m-%Y") , row[3]       , row[4], row[5], row[6],row[7],row[8],row[9],row[10], row[11], row[12], row[13], row[14], row[15],row[16]))

  micursor.close()
  miconexion.close()

#######################################################################################3
def muestraCalibracion():
  refrescar()
  ventanaCali=Toplevel(root)
  ventanaCali.config(cursor="hand2")
  ventanaCali.geometry("1150x400")
  ventanaCali.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaCali.title("Registro de calibraciones de sensores de DQO")
  campos=Frame(ventanaCali)
  campos.pack()
  tipoLabel=Label(campos, text="Fecha de la última calibración: "+datetime.datetime.strftime(datetime.datetime.strptime(fechaUltimaCalibracion,"%Y-%m-%d"),"%d-%m-%Y"))
  tipoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  estadoLabel=Label(campos, text="Estado del sensor actualmente "+estadoSensor)
  estadoLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  def eliminarCalibracion():
    #elimina datos en BBDD de cada ensayo
    
    valor="not"
    #answ = simpledialog.askinteger("Eliminación de registros...", "Introduce el numero de Id",  parent=ventanaCali,  minvalue=1, maxvalue=9999)
    #if answ is not None:
    IdSeleccionada=0
    try:
      IdSeleccionada=tree.item(tree.selection())['values'][0]
    except:
      messagebox.showerror("Error","Debes seleccionar primero el registro a eliminar en la tabla de abajo")  
    if IdSeleccionada !=0:
      valor=messagebox.askquestion("Aviso", "Deseas borrar de verdad?")
      if valor=="yes": #and answ is not None:
        miconexion=sqlite3.connect("D:\\tempcontrol.db")
        micursor=miconexion.cursor()
        try:
          micursor.execute("DELETE FROM calibracion WHERE Id="+str(IdSeleccionada))
          messagebox.showinfo("Atencion","Registro "+str(IdSeleccionada)+" eliminado con exito") 
          miconexion.commit()
          ventanaCali.destroy()
        except:
          messagebox.showerror("Atencion","Error") 
        finally:
          micursor.close()
          miconexion.close()    
      else:
        messagebox.showerror("Atencion","Cancelado")   

  botonera=Frame(ventanaCali)
  botonera.pack()
  botonparar=Button(botonera, text="Eliminar registro", command=eliminarCalibracion)
  botonparar.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  def cerrar():
    ventanaCali.destroy()
  botoncerrar=Button(botonera, text="Cerrar", command=cerrar)
  botoncerrar.grid(row=1, column=3, sticky="e", padx=10, pady=10)
  Right = Frame(ventanaCali, width=600, height=500, bd=8, relief="raise")
  Right.pack(side=RIGHT)
  scrollbary = Scrollbar(Right, orient=VERTICAL)
  scrollbarx = Scrollbar(Right, orient=HORIZONTAL)
  tree = ttk.Treeview(Right, columns=("Id", "fecha", "sensor", "realizado por", "factor 80", "factor 150","uMatSusp","u150","observaciones"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=tree.yview)
  scrollbary.pack(side=RIGHT, fill=Y)
  scrollbarx.config(command=tree.xview)
  scrollbarx.pack(side=BOTTOM, fill=X)
  tree.heading('Id', text="Id", anchor=W)
  tree.heading('fecha', text="fecha", anchor=W)
  tree.heading('sensor', text="sensor", anchor=W)
  tree.heading('realizado por', text="realizado por", anchor=W)
  tree.heading('factor 80', text="factor 80", anchor=W)
  tree.heading('factor 150', text="factor 150", anchor=W)
  tree.heading('uMatSusp', text="Incert exp 80", anchor=W)
  tree.heading('u150', text="Incert exp 150", anchor=W)
  tree.heading('observaciones', text="observaciones", anchor=W)
  tree.column('#0', stretch=NO, minwidth=0, width=10)
  tree.column('#1', stretch=NO, minwidth=0, width=40)
  tree.column('#2', stretch=NO, minwidth=0, width=80)
  tree.column('#3', stretch=NO, minwidth=0, width=45)
  tree.column('#4', stretch=NO, minwidth=0, width=150)
  tree.column('#5', stretch=NO, minwidth=0, width=120)
  tree.column('#6', stretch=NO, minwidth=0, width=120)
  tree.column('#7', stretch=NO, minwidth=0, width=200)
  tree.column('#8', stretch=NO, minwidth=0, width=120)
  tree.column('#9', stretch=NO, minwidth=0, width=200)
  tree.pack()

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  micursor.execute("SELECT * from calibracion order by Id desc")
  datos=micursor.fetchall()
  
  tree.delete(*tree.get_children())

  for row in datos:
      #print (row)
      tree.insert('', 'end', values=(  row[0],  datetime.datetime.strftime(datetime.datetime.strptime(row[1],"%Y-%m-%d"),"%d-%m-%Y")  , row[2], row[3], row[4], row[5], row[6],row[7],row[8]))

  micursor.close()
  miconexion.close()


####################################################################################################


def muestraTemperaturas(a):
  refrescar()
  ventanaTemperaturas=Toplevel(root)
  ventanaTemperaturas.config(cursor="hand2")
  ventanaTemperaturas.geometry("700x900")
  ventanaTemperaturas.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaTemperaturas.title("Temperaturas registradas en el ensayo")
  campos=Frame(ventanaTemperaturas)
  campos.pack()

  #answer = simpledialog.askinteger("Registro temperaturas", "Introduce el numero de Id",  parent=ventanaTemperaturas,  minvalue=1, maxvalue=9999)
  
  

  answer=a
  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  micursor.execute("SELECT num_medidas, mal_up, mal_down, media, max, min, fuerarango, factorcorrector, incertidumbre FROM ensayos WHERE Id ="+str(answer))
  miconexion.commit()
  datos= micursor.fetchall()
  for row in datos:
    num_medidas=row[0]
    mal_up=row[1]
    mal_down=row[2]
    media=row[3]
    maxi=row[4]
    mini=row[5]
    fuera=row[6]
    factor=row[7]
    incert=row[8]

  def eliminar():
    #elimina datos en BBDD de cada ensayo
    #answ = simpledialog.askinteger("Eliminación de registros...", "Introduce el numero de Id",  parent=ventanaTemperaturas,  minvalue=1, maxvalue=9999)
    
    #if answ is not None:

    answer=0
    try:
      answer=tree.item(tree.selection())['values'][0]
    except:
      messagebox.showerror("Error","Debes seleccionar primero el registro a eliminar en la tabla de abajo")  
    if answer !=0:
      valor=messagebox.askquestion("Aviso", "Deseas borrar de verdad? Se borrarán también el ensayo asociado")
      if valor=="yes": # and answ is not None:
        miconexion=sqlite3.connect("D:\\tempcontrol.db")
        micursor=miconexion.cursor()
        try:
          micursor.execute("DELETE FROM temperaturas WHERE Id="+str(answer))
          micursor.execute("DELETE FROM ensayos WHERE Id="+str(answer))
          messagebox.showinfo("Atencion","Registro eliminado con exito")
          miconexion.commit()
        except:
          messagebox.showerror("Atencion","Error") 
        finally:
          micursor.close()
          miconexion.close()   
      else:
        messagebox.showerror("Atencion","Cancelado")   

  botonera=Frame(ventanaTemperaturas)
  botonera.pack()
  #botonparar=Button(botonera, text="Eliminar registros", command=eliminar)
  #botonparar.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  def cerrar():
    ventanaTemperaturas.destroy()
  botoncerrar=Button(botonera, text="Cerrar", command=cerrar)
  botoncerrar.grid(row=1, column=3, sticky="e", padx=10, pady=10) 

  tipoLabel=Label(campos, text="Número medidas: "+str(num_medidas)+ " / Media: "+str(media)+" / minimo: "+str(mini)+" / Máximo: "+str(maxi)+" /factor corr: "+str(factor)+" / Incert: "+str(incert))
  tipoLabel.grid(row=1, column=1, sticky="e", padx=10, pady=5)
  estadoLabel=Label(campos, text="Valores no conformes por arriba: "+str(mal_up)+" / Valores no conformes por abajo: "+str(mal_down)+" / Valores fuera de rango del termómetro: "+str(fuera) )
  estadoLabel.grid(row=2, column=1, sticky="e", padx=10, pady=5)

  Right = Frame(ventanaTemperaturas, width=600, height=500, bd=8, relief="raise")
  Right.pack(side=RIGHT)
  scrollbary = Scrollbar(Right, orient=VERTICAL)
  scrollbarx = Scrollbar(Right, orient=HORIZONTAL)
  tree = ttk.Treeview(Right, columns=("Id", "hora",  "temperatura","temp_corregida", "margen","mal"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=tree.yview)
  scrollbary.pack(side=RIGHT, fill=Y)
  scrollbarx.config(command=tree.xview)
  scrollbarx.pack(side=BOTTOM, fill=X)
  tree.heading('Id', text="Id", anchor=W)
  tree.heading('hora', text="hora", anchor=W)
 
  tree.heading('temperatura', text="temperatura", anchor=W)
  tree.heading('temp_corregida', text="temp_corregida", anchor=W)
  tree.heading('mal', text="mal", anchor=W)
  tree.heading('margen', text="margen", anchor=W)
  tree.column('#0', stretch=NO, minwidth=0, width=0)
  tree.column('#1', stretch=NO, minwidth=0, width=40)
  tree.column('#2', stretch=NO, minwidth=0, width=80)
  tree.column('#3', stretch=NO, minwidth=0, width=80) 
  tree.column('#4', stretch=NO, minwidth=0, width=80) 
  tree.column('#5', stretch=NO, minwidth=0, width=80) 
  tree.pack()

  micursor.execute("SELECT * from temperaturas WHERE Id="+str(answer))
  datos=micursor.fetchall()
  tree.delete(*tree.get_children())
  
  malas=""
  for row in datos:
      #print (row)
      if abs(row[3]-tempokDQO) > toleranciaDQO:
        malas="x"
      tree.insert('', 'end', values=(row[0],row[1], row[2],row[3],row[3]-tempokDQO,malas) ) #modificar el factor corrector y las malas!!!!!
      malas=""
  micursor.close()
  miconexion.close()



####################################################################################################


def muestraHistorial():
  refrescar()
  ventanaHistorial=Toplevel(root)
  ventanaHistorial.config(cursor="hand2")
  ventanaHistorial.geometry("800x400")
  ventanaHistorial.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaHistorial.title("Historial del sensor DQO")
  campos=Frame(ventanaHistorial)
  campos.pack()

  #tipoLabel=Label(campos, text="Fecha de la última calibración: "+str(fechaUltimaCalibracion))
  tipoLabel=Label(campos, text="Fecha de la última calibración: "+datetime.datetime.strftime(datetime.datetime.strptime(fechaUltimaCalibracion,"%Y-%m-%d"),"%d-%m-%Y"))

  
  tipoLabel.grid(row=1, column=1, sticky="e", padx=10, pady=5)
  estadoLabel=Label(campos, text="Estado del sensor actualmente "+estadoSensor)
  estadoLabel.grid(row=2, column=1, sticky="e", padx=10, pady=5)

  def eliminar():
    #elimina datos en BBDD 
    valor="not"
    
    #answ = simpledialog.askinteger("Eliminación de registros...", "Introduce el numero de Id",  parent=ventanaHistorial,  minvalue=1, maxvalue=9999)
    #if answ is not None:


    IdSeleccionada=0
    try:
      IdSeleccionada=tree.item(tree.selection())['values'][0]
    except:
      messagebox.showerror("Error","Debes seleccionar primero el registro a eliminar en la tabla de abajo")  
    if IdSeleccionada !=0:
      valor=messagebox.askquestion("Aviso", "Deseas borrar de verdad?")
      if valor=="yes": # and answ is not None:
        miconexion=sqlite3.connect("D:\\tempcontrol.db")
        micursor=miconexion.cursor()
        try:
          micursor.execute("DELETE FROM historial WHERE Id="+str(IdSeleccionada))
          messagebox.showinfo("Atencion","Registro "+str(IdSeleccionada)+" eliminado con exito") 
          miconexion.commit()
          ventanaHistorial.destroy()
        except:
          messagebox.showerror("Atencion","Error") 
        finally:
          micursor.close()
          miconexion.close()  
      else:
        messagebox.showerror("Atencion","Cancelado")   

  botonera=Frame(ventanaHistorial)
  botonera.pack()
  botonparar=Button(botonera, text="Eliminar registro", command=eliminar)
  botonparar.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  def cerrar():
    ventanaHistorial.destroy()

  botoncerrar=Button(botonera, text="Cerrar", command=cerrar)
  botoncerrar.grid(row=1, column=1, sticky="e", padx=10, pady=10)

  Right = Frame(ventanaHistorial, width=600, height=500, bd=8, relief="raise")
  Right.pack(side=RIGHT)
  scrollbary = Scrollbar(Right, orient=VERTICAL)
  scrollbarx = Scrollbar(Right, orient=HORIZONTAL)
  tree = ttk.Treeview(Right, columns=("Id", "fecha", "sensor", "operación", "realizado por", "estado","observaciones"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=tree.yview)
  scrollbary.pack(side=RIGHT, fill=Y)
  scrollbarx.config(command=tree.xview)
  scrollbarx.pack(side=BOTTOM, fill=X)
  tree.heading('Id', text="Id", anchor=W)
  tree.heading('fecha', text="fecha", anchor=W)
  tree.heading('sensor', text="sensor", anchor=W)
  tree.heading('operación', text="operación", anchor=W)
  tree.heading('realizado por', text="realizado por", anchor=W)
  tree.heading('estado', text="estado", anchor=W)
  tree.heading('observaciones', text="observaciones", anchor=W)
  tree.column('#0', stretch=NO, minwidth=0, width=0)
  tree.column('#1', stretch=NO, minwidth=0, width=40)
  tree.column('#2', stretch=NO, minwidth=0, width=80)
  tree.column('#3', stretch=NO, minwidth=0, width=45)
  tree.column('#4', stretch=NO, minwidth=0, width=150)
  tree.column('#5', stretch=NO, minwidth=0, width=120)
  tree.column('#6', stretch=NO, minwidth=0, width=120)
  tree.column('#7', stretch=NO, minwidth=0, width=200)
  tree.pack()

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  micursor.execute("SELECT * from historial order by Id desc")
  datos=micursor.fetchall() 
  tree.delete(*tree.get_children())
 
  for row in datos:
      tree.insert('', 'end', values=(row[0],datetime.datetime.strftime(datetime.datetime.strptime(row[1],"%Y-%m-%d"),"%d-%m-%Y"), row[2], row[3], row[4], row[5], row[6]))

  micursor.close()
  miconexion.close()

#############################################################################################


def ventanaEstadoSensor():

  refrescar()
  ventanaEstado=Toplevel(root)
  ventanaEstado.config(cursor="hand2")
  ventanaEstado.geometry("630x400")
  ventanaEstado.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaEstado.title("Estado actual del sensor")
  campos=Frame(ventanaEstado)
  campos.pack()
  def salir():
    ventanaEstado.destroy()
  botonera=Frame(ventanaEstado)
  botonera.pack()
  botonparar=Button(botonera, text="Cerrar", command=salir)
  botonparar.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  
  if estadoSensor=="Apto":
    estadoLabel=Label(campos, bg="green", text="Estado del sensor actualmente "+estadoSensor)
    estadoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  elif estadoSensor=="Observación":
    estadoLabel=Label(campos, bg="yellow", text="Estado del sensor actualmente "+estadoSensor)
    estadoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  else:
    estadoLabel=Label(campos, bg="red", text="Estado del sensor actualmente "+estadoSensor)
    estadoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)

  hoyLabel=Label(campos,  text="Hoy: "+str(hoy))
  hoyLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)  

  tipoLabel=Label(campos,  text="Fecha de la última calibración: "+datetime.datetime.strftime(datetime.datetime.strptime(fechaUltimaCalibracion,"%Y-%m-%d"),"%d-%m-%Y"))
  tipoLabel.grid(row=2, column=0, sticky="e", padx=10, pady=5)
  ahora = datetime.datetime.utcnow()

  mifecha=datetime.datetime.strptime(fechaUltimaCalibracion,"%Y-%m-%d")

  prox=mifecha+datetime.timedelta(days=daysToCalibrate)
  faltan= prox-ahora
  
  proximLabel=Label(campos,  text="Próxima calibración el: "+str(prox.strftime("%d/%m/%Y"))+" / Faltan "+str(faltan.days)+" días")
  proximLabel.grid(row=3, column=0, sticky="e", padx=10, pady=5)
  
  factorMatsuspLabel=Label(campos, text="Factor corrector de Mat suspensión:  "+str(factorMatSusp)+"ºC")
  factorMatsuspLabel.grid(row=4, column=0, sticky="e", padx=10, pady=5)
  factor150Label=Label(campos, text="Factor corrector de DQO:  "+str(factor150)+"ºC")
  factor150Label.grid(row=5, column=0, sticky="e", padx=10, pady=5)

  uMatSuspLabel=Label(campos, text="Incertidumbre expandida a 105º Mat susp:  "+str(uMatSusp)+"ºC")
  uMatSuspLabel.grid(row=6, column=0, sticky="e", padx=10, pady=5)
  u150Label=Label(campos, text="Incertidumbre expandida a 150º DQO:  "+str(u150)+"ºC")
  u150Label.grid(row=7, column=0, sticky="e", padx=10, pady=5)

  
###########################################################################################################


def ventanaConfig():
  "Crea una ventana para introducir los datos de configuración"
  refrescar()
  ventanaConfig=Toplevel(root)
  ventanaConfig.config(cursor="hand2")
  ventanaConfig.geometry("630x500")
  ventanaConfig.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaConfig.title("Configuración de la aplicación")
  campos=Frame(ventanaConfig)
  campos.pack()

  periodocali=IntVar(value=daysToCalibrate)
  rangosup=DoubleVar(value=rangosu)
  rangoinf=DoubleVar(value=rangoin)
  factorCobertura=DoubleVar(value=factCober)
  intervalomed=IntVar(value=intervalomedida)
  tiempomedidaDQO=IntVar(value=duraciondqo)
  tiempomedidaCN=IntVar(value=duracionCN)
  tempdqo=DoubleVar(value=tempokDQO)
  tempokCN=DoubleVar(value=tempcn)
  toleranceDQO=DoubleVar(value=toleranciaDQO)
  toleranceCN=DoubleVar(value=toleranciaCN)
        
 ##################################################################################################### 

  def insertar():
    #inserta datos de configuracion
    miconexion=sqlite3.connect("D:\\tempcontrol.db")
    micursor=miconexion.cursor()
    #datos=periodocali.get(), rangosup.get(), rangoinf.get(), factorCobertura.get(), intervalomed.get(), tiempomedidaDQO.get(), tiempomedidaCiN.get() ,tempdqo.get() ,tempokCN.get() ,toleranceDQO.get() , toleranceCN.get()
    
    try:
     # micursor.execute("INSERT INTO config VALUES(?,?,?,?,?,?,?,?,?,?,?)",(datos))
     # micursor.execute("UPDATE config SET diascalibracion=?, rangosup=?, rangoinf=?, factorCobertura=?, intervalomedida=?, duracionDQO=?, duracionCN=?, tempDQO=?, tempCN=?, aceptacionDQO=?, aceptacionCN=?", (datos))
      micursor.execute("UPDATE config SET diascalibracion="+str(periodocali.get())+", rangosup="+str(rangosup.get())+", rangoinf="+str(rangoinf.get())+", factorcobertura="+str(factorCobertura.get()))
      micursor.execute("UPDATE config SET intervalomedida="+str(intervalomed.get())+", duracionDQO="+str(tiempomedidaDQO.get())+",duracionCN="+str(tiempomedidaCN.get()))
      micursor.execute("UPDATE config SET tempDQO="+str(tempdqo.get())+", tempCN="+str(tempokCN.get())+", aceptacionDQO="+str(toleranceDQO.get())+", aceptacionCN="+str(toleranceCN.get()))
      miconexion.commit()
      messagebox.showinfo("Atencion","Registro creado con éxito ")
    except:
      messagebox.showerror("Error","No se ha podido insertar en la base de datos")  
    finally:
      micursor.close()
      miconexion.close()
    ventanaConfig.destroy()

  cuadroperiodocali=Entry(campos, textvariable=periodocali)
  cuadroperiodocali.grid(row=0, column=1, padx=10, pady=10)
  cuadrorangosup=Entry(campos, textvariable=rangosup)
  cuadrorangosup.grid(row=1, column=1, padx=10, pady=10)
  cuadrorangoinf=Entry(campos, textvariable=rangoinf)
  cuadrorangoinf.grid(row=2, column=1, padx=10, pady=10)
  cuadroK=Entry(campos, textvariable=factorCobertura)
  cuadroK.grid(row=3, column=1, padx=10, pady=10)
  cuadrointervalomedida=Entry(campos, textvariable=intervalomed)
  cuadrointervalomedida.grid(row=4, column=1, padx=10, pady=10)
  cuadrotiempomedidaDQO=Entry(campos, textvariable=tiempomedidaDQO)
  cuadrotiempomedidaDQO.grid(row=5, column=1, padx=10, pady=10)
  cuadrotempokDQO=Entry(campos, textvariable=tempdqo)
  cuadrotempokDQO.grid(row=6, column=1, padx=10, pady=10)
  cuadrotoleranceDQO=Entry(campos, textvariable=toleranceDQO)
  cuadrotoleranceDQO.grid(row=7, column=1, padx=10, pady=10)
  cuadrotiempomedidaCN=Entry(campos, textvariable=tiempomedidaCN)
  cuadrotiempomedidaCN.grid(row=8, column=1, padx=10, pady=10)
  cuadrotempokCN=Entry(campos, textvariable=tempokCN)
  cuadrotempokCN.grid(row=9, column=1, padx=10, pady=10)
  cuadrotoleranceCN=Entry(campos, textvariable=toleranceCN)
  cuadrotoleranceCN.grid(row=10, column=1, padx=10, pady=10)
  #labels
  periodocaliLabel=Label(campos, text="Periodo calibración (días):")
  periodocaliLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  rangosupLabel=Label(campos, text="Rango superior del sensor ºC:")
  rangosupLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  rangoinfLabel=Label(campos, text="Rango inferior del sensor ºC:")
  rangoinfLabel.grid(row=2, column=0, sticky="e", padx=10, pady=5)
  KLabel=Label(campos, text="Factor de cobertura K:")
  KLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  intervalomedidaLabel=Label(campos, text="Intervalo medidas en segundos:")
  intervalomedidaLabel.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  tiempomedidaDQOLabel=Label(campos, text="Duracion ensayo DQO en minutos:")
  tiempomedidaDQOLabel.grid(row=5, column=0, sticky="e", padx=10, pady=10)
  tempokDQOLabel=Label(campos, text="Temperatura correcta DQO ºC:")
  tempokDQOLabel.grid(row=6, column=0, sticky="e", padx=10, pady=10)
  toleranceDQOLabel=Label(campos, text="Tolerancia Aceptación DQO ºC:")
  toleranceDQOLabel.grid(row=7, column=0, sticky="e", padx=10, pady=10)
  tiempomedidaCNLabel=Label(campos, text="Duración ensayo Mat. suspensión en minutos:")
  tiempomedidaCNLabel.grid(row=8, column=0, sticky="e", padx=10, pady=10)
  tempokCNLabel=Label(campos, text="Temperatura correcta mat. suspensión ºC:")
  tempokCNLabel.grid(row=9, column=0, sticky="e", padx=10, pady=10)
  toleranceCNLabel=Label(campos, text="Tolerancia Aceptación Mat. suspensión ºC:")
  toleranceCNLabel.grid(row=10, column=0, sticky="e", padx=10, pady=10)

  miFrame2=Frame(ventanaConfig)
  miFrame2.pack()
  botonNuevo=Button(miFrame2, text="Insertar nueva configuración", command=insertar)
  botonNuevo.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  botonDelet=Button(miFrame2, text="Cancelar", command=lambda : ventanaConfig.destroy())
  botonDelet.grid(row=1, column=1, sticky="e", padx=10, pady=10)
  
  ventanaConfig.mainloop()

########################################################################################################

def ventanacalibracion():
  ' Crea la ventana para introducir los datos de una nueva calibración '
  ventanacali=Toplevel(root)
  ventanacali.config(cursor="hand2")
  ventanacali.geometry("630x500")
  ventanacali.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanacali.title("Datos de calibración")
  campos=Frame(ventanacali)
  campos.pack()

  ano=time.strftime("%Y")
  mes=time.strftime("%m")
  dia=time.strftime("%d")
  cal=DateEntry(ventanacali,width=12, year=int(ano), month=int(mes),day=int(dia), background='darkblue', foreground='white', borderwidth=2)
  cal.pack(padx=10, pady=10)

  sensor=StringVar(value="SENS1")
  factor150=DoubleVar()
  factorMatSusp=DoubleVar()
  operario=StringVar()
  uMatSusp=StringVar()
  u150=StringVar()

  def limpiarcampos():
      #cal.set("")
      sensor.set("")
      factor150.set("")
      factorMatSusp.set("")
      operario.set("")
      textoComentario.delete(1.0,END)

  def insertar():
    #inserta datos  en BBDD 
    miconexion=sqlite3.connect("D:\\tempcontrol.db")
    micursor=miconexion.cursor()
    datos=cal.get_date(),sensor.get(),  operario.get(),  factorMatSusp.get(),  factor150.get(),uMatSusp.get(),u150.get(),textoComentario.get("1.0",END) 
    try:
      micursor.execute("INSERT INTO calibracion VALUES(NULL,?,?,?,?,?,?,?,?)",(datos))
      miconexion.commit()
      messagebox.showinfo("Atencion","Registro creado con éxito ")
    except:
      messagebox.showerror("Error","No se ha podido insertar en la base de datos")  
    finally:
      micursor.close()
      miconexion.close()
    ventanacali.destroy()
    
  #cuadrofecha=Entry(campos, textvariable=cal)
  #cuadrofecha.grid(row=0, column=1, padx=10, pady=10)
  cuadrosensor=Entry(campos, textvariable=sensor)
  cuadrosensor.grid(row=1, column=1, padx=10, pady=10)
  cuadrofactor150=Entry(campos, textvariable=factor150)
  cuadrofactor150.grid(row=2, column=1, padx=10, pady=10)
  cuadrofactorMatsusp=Entry(campos, textvariable=factorMatSusp)
  cuadrofactorMatsusp.grid(row=3, column=1, padx=10, pady=10)
  cuadrooperario=Entry(campos, textvariable=operario)
  cuadrooperario.grid(row=4, column=1, padx=10, pady=10)
  cuadrouMatSusp=Entry(campos, textvariable=uMatSusp)
  cuadrouMatSusp.grid(row=5, column=1, padx=10, pady=10)
  cuadrou150=Entry(campos, textvariable=u150)
  cuadrou150.grid(row=6, column=1, padx=10, pady=10)
  #fechaLabel=Label(campos, text="Fecha:")
  #fechaLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  sensorLabel=Label(campos, text="Sensor:")
  sensorLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  factor150Label=Label(campos, text="Factor DQO a 150ºC:")
  factor150Label.grid(row=2, column=0, sticky="e", padx=10, pady=5)
  factorMatsuspLabel=Label(campos, text="Factor Mat susp. a 105ºC:")
  factorMatsuspLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  operarioLabel=Label(campos, text="Realizado por:")
  operarioLabel.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  uMatSuspLabel=Label(campos, text="Incert exp Materias susp.:")
  uMatSuspLabel.grid(row=5, column=0, sticky="e", padx=10, pady=10)
  u150Label=Label(campos, text="Incert exp DQO:")
  u150Label.grid(row=6, column=0, sticky="e", padx=10, pady=10)
  comentarioLabel=Label(campos, text="Observaciones:")
  comentarioLabel.grid(row=7, column=0, sticky="e", padx=10, pady=10)
  textoComentario=Text(campos, width=16, height=4)
  textoComentario.grid(row=7, column=1, padx=10, pady=10)
  scrollVert=Scrollbar(campos, command=textoComentario.yview)
  scrollVert.grid(row=7, column=2, sticky="nsew")
  textoComentario.config(yscrollcommand=scrollVert.set)

  fechalabel=Label(campos, text="Fecha:")
  fechalabel.grid(row=9, column=0, sticky="e", padx=10, pady=10)  

  def sal():
    ventanacali.destroy()

  miFrame2=Frame(ventanacali)
  miFrame2.pack()
  botonNuevo=Button(miFrame2, text="Insertar nueva calibración", command=insertar)
  botonNuevo.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  botonLimpiar=Button(miFrame2, text="Resetear formulario", command=limpiarcampos)
  botonLimpiar.grid(row=1, column=2, sticky="e", padx=10, pady=10)
  botoncan=Button(miFrame2, text="Cancelar", command=sal)
  botoncan.grid(row=1, column=3, sticky="e", padx=10, pady=10)
  ventanacali.mainloop()

##############################################################################################################


def ventanaHistory():  
  " Crea una ventana para introducir el historial de mantenimiento del sensor"

  ventanaHistorial=Toplevel(root)
  ventanaHistorial.config(cursor="hand2")
  ventanaHistorial.geometry("630x400")
  ventanaHistorial.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaHistorial.title("Historial del equipo, edición y aporte de información")
  campos=Frame(ventanaHistorial)
  campos.pack()
  #fecha=StringVar(value=time.strftime("%d/%m/%Y"))
  sensor=StringVar(value="SENS1")
  operacion=StringVar()
  operario=StringVar()
  estado=StringVar()

  ano=time.strftime("%Y")
  mes=time.strftime("%m")
  dia=time.strftime("%d")
  cal=DateEntry(ventanaHistorial,width=12, year=int(ano), month=int(mes),day=int(dia), background='darkblue', foreground='white', borderwidth=2)
  cal.pack(padx=10, pady=10)
  
  def limpiarcampos():
    #fecha.set("")
    sensor.set("")
    operacion.set("")
    operario.set("")
    estado.set("Apto")
    textoComentario.delete(1.0,END)

  def insertar():
    #inserta datos en BBDD de cada ensayo
    miconexion=sqlite3.connect("D:\\tempcontrol.db")
    micursor=miconexion.cursor()
    datos=cal.get_date(),sensor.get(),operacion.get(),operario.get(),estado.get(),textoComentario.get("1.0",END) 
    try:
      micursor.execute("INSERT INTO historial VALUES(NULL,?,?,?,?,?,?)",(datos))
      miconexion.commit()
      messagebox.showinfo("Atencion","Registro creado con éxito ")
    except:
      messagebox.showerror("Error","No se ha podido insertar en la base de datos")  
    finally:
      micursor.close()
      miconexion.close()
    ventanaHistorial.destroy()  
      
  #cuadrofecha=Entry(campos, textvariable=fecha)
  #cuadrofecha.grid(row=0, column=1, padx=10, pady=8)
  cuadrosensor=Entry(campos, textvariable=sensor)
  cuadrosensor.grid(row=1, column=1, padx=10, pady=4)
  cuadrooperacion=Entry(campos, textvariable=operacion)
  cuadrooperacion.grid(row=2, column=1, padx=10, pady=15)
  cuadrooperario=Entry(campos, textvariable=operario)
  cuadrooperario.grid(row=3, column=1, padx=10, pady=10)
  estado.set("Apto")

  #cuadroEstado=Entry(campos, textvariable=estado)
  #cuadroEstado.grid(row=4, column=1, padx=10, pady=10)

  textoComentario=Text(campos, width=16, height=4)
  textoComentario.grid(row=4, column=1, padx=10, pady=10)
  scrollVert=Scrollbar(campos, command=textoComentario.yview)
  scrollVert.grid(row=4, column=2, sticky="nsew")
  textoComentario.config(yscrollcommand=scrollVert.set)

  rb1=Radiobutton(campos, text="Apto para el uso",  value="Apto", variable=estado)
  rb1.grid(column=1, row=5)
  rb2=Radiobutton(campos, text="En observación", value="Observacion", variable=estado)
  rb2.grid(column=1,row=6)
  rb3=Radiobutton(campos, text="No apto", value="No apto",variable=estado)
  rb3.grid(column=1,row=7)

  sensorLabel=Label(campos, text="Sensor:")
  sensorLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  operacionLabel=Label(campos, text="Operación:")
  operacionLabel.grid(row=2, column=0, sticky="e", padx=10, pady=5)
  operarioLabel=Label(campos, text="Realizado por:")
  operarioLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  comentarioLabel=Label(campos, text="Observaciones:")
  comentarioLabel.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  estadoLabel=Label(campos, text="Estado del sensor:")
  estadoLabel.grid(row=5, column=0, sticky="e", padx=10, pady=10) 
  fechalabel=Label(campos, text="Fecha:")
  fechalabel.grid(row=7, column=0, sticky="e", padx=10, pady=10)  

   #botones en el grid de abajo

  def cancela():
    ventanaHistorial.destroy()

  miFrame2=Frame(ventanaHistorial)
  miFrame2.pack()
  botonNuevo=Button(miFrame2, text="Insertar datos", command=insertar)
  botonNuevo.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  #botonDelet=Button(miFrame2, text="Eliminar ensayo")
  #botonDelet.grid(row=1, column=1, sticky="e", padx=10, pady=10)
  botonLimpiar=Button(miFrame2, text="Resetear formulario", command=limpiarcampos)
  botonLimpiar.grid(row=1, column=2, sticky="e", padx=10, pady=10)
  botonCan=Button(miFrame2, text="Cancelar", command=cancela)
  botonCan.grid(row=1, column=3, sticky="e", padx=10, pady=10)

  ventanaHistorial.mainloop()


######################################################################################################


def ventanaEnsayos():
  #campos de los ensayos
  ventanaEnsayos=Toplevel(root)
  ventanaEnsayos.config(cursor="hand2")
  ventanaEnsayos.geometry("630x900")
  ventanaEnsayos.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaEnsayos.title("Ensayos registrados")
  campos=Frame(ventanaEnsayos)
  campos.pack()
  
  #fecha=StringVar(value=time.strftime("%d/%m/%Y"))
  sensor=StringVar(value="SENS1")
  cubeta=IntVar()
  tipoEnsayo=StringVar(value="DQO")
  lims1=IntVar()
  lims2=IntVar()
  lims3=IntVar()
  lims4=IntVar()
  lims5=IntVar()
  lims6=IntVar()
  lims7=IntVar()
  lims8=IntVar()
  lims9=IntVar()
  analista=StringVar()
  control=StringVar()

  rb1=Radiobutton(campos, text="DQO",  value="DQO", variable=tipoEnsayo)
  rb1.grid(column=1, row=0)
  rb2=Radiobutton(campos, text="Mat. susp.", value="Mat", variable=tipoEnsayo)
  rb2.grid(column=2,row=0)

  ano=time.strftime("%Y")
  mes=time.strftime("%m")
  dia=time.strftime("%d")
  cal=DateEntry(ventanaEnsayos,width=12, year=int(ano), month=int(mes),day=int(dia), background='darkblue', foreground='white', borderwidth=2)
  cal.pack(padx=10, pady=10)

  spin=Spinbox(campos, from_=0, to=9, width=1, textvariable=cubeta)
  spin.grid(row=2, column=1)
  cuadrosensor=Entry(campos, textvariable=sensor)
  cuadrosensor.grid(row=3, column=1, padx=10, pady=10)
  cuadrolims1=Entry(campos, textvariable=lims1)  
  cuadrolims1.grid(row=4, column=1, padx=10, pady=10)
  cuadrolims2=Entry(campos, textvariable=lims2)  
  cuadrolims2.grid(row=5, column=1, padx=10, pady=10)
  cuadrolims3=Entry(campos, textvariable=lims3)  
  cuadrolims3.grid(row=6, column=1, padx=10, pady=10)
  cuadrolims4=Entry(campos, textvariable=lims4)  
  cuadrolims4.grid(row=7, column=1, padx=10, pady=10)
  cuadrolims5=Entry(campos, textvariable=lims5)  
  cuadrolims5.grid(row=8, column=1, padx=10, pady=10)
  cuadrolims6=Entry(campos, textvariable=lims6)  
  cuadrolims6.grid(row=9, column=1, padx=10, pady=10)
  cuadrolims7=Entry(campos, textvariable=lims7)  
  cuadrolims7.grid(row=10, column=1, padx=10, pady=10)
  cuadrolims8=Entry(campos, textvariable=lims8)  
  cuadrolims8.grid(row=11, column=1, padx=10, pady=10)
  cuadrolims9=Entry(campos, textvariable=lims9)  
  cuadrolims9.grid(row=12, column=1, padx=10, pady=10)
  cuadroctrl=Entry(campos, textvariable=control)  
  cuadroctrl.grid(row=13, column=1, padx=10, pady=10)
  cuadroanalista=Entry(campos, textvariable=analista)  
  cuadroanalista.grid(row=14, column=1, padx=10, pady=10)
 
  textoComentario=Text(campos, width=16, height=4)
  textoComentario.grid(row=15, column=1, padx=10, pady=10)
  scrollVert=Scrollbar(campos, command=textoComentario.yview)
  scrollVert.grid(row=15, column=2, sticky="nsew")
  textoComentario.config(yscrollcommand=scrollVert.set)


  def limpiarcamposEnsayo():
    #fecha.set("")
    sensor.set("")
    cubeta.set("")
    tipoEnsayo.set("DQO")
    analista.set("")
    control.set("")
    lims1.set("")
    lims2.set("")
    lims3.set("")
    lims4.set("")
    lims5.set("")
    lims6.set("")
    lims7.set("")
    lims8.set("")
    lims9.set("")
    textoComentario.delete(1.0,END)

  # labels de los cuadros
  tipoLabel=Label(campos, text="Tipo ensayo:")
  tipoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  #fechaLabel=Label(campos, text="Fecha:")
  #fechaLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  cubetaLabel=Label(campos, text="Cubeta sensor:")
  cubetaLabel.grid(row=2, column=0, sticky="e", padx=10, pady=10)
  sensorLabel=Label(campos, text="Sensor:")
  sensorLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  lims1Label=Label(campos, text="Num Lims cubeta 1:")
  lims1Label.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  lims2Label=Label(campos, text="Num Lims cubeta 2:")
  lims2Label.grid(row=5, column=0, sticky="e", padx=10, pady=10)
  lims3Label=Label(campos, text="Num Lims cubeta 3:")
  lims3Label.grid(row=6, column=0, sticky="e", padx=10, pady=10)
  lims4Label=Label(campos, text="Num Lims cubeta 4:")
  lims4Label.grid(row=7, column=0, sticky="e", padx=10, pady=10)
  lims5Label=Label(campos, text="Num Lims cubeta 5:")
  lims5Label.grid(row=8, column=0, sticky="e", padx=10, pady=10)
  lims6Label=Label(campos, text="Num Lims cubeta 6:")
  lims6Label.grid(row=9, column=0, sticky="e", padx=10, pady=10)
  lims7Label=Label(campos, text="Num Lims cubeta 7:")
  lims7Label.grid(row=10, column=0, sticky="e", padx=10, pady=10)
  lims8Label=Label(campos, text="Num Lims cubeta 8:")
  lims8Label.grid(row=11, column=0, sticky="e", padx=10, pady=10)
  lims9Label=Label(campos, text="Num Lims cubeta 9:")
  lims9Label.grid(row=12, column=0, sticky="e", padx=10, pady=10)

  controlLabel=Label(campos, text="Controles:")
  controlLabel.grid(row=13, column=0, sticky="e", padx=10, pady=10)
  analistaLabel=Label(campos, text="Analista:")
  analistaLabel.grid(row=14, column=0, sticky="e", padx=10, pady=10)
  comentLabel=Label(campos, text="Observaciones:")
  comentLabel.grid(row=15, column=0, sticky="e", padx=10, pady=10)
 

  def insertarEnsayo():
    #inserta datos en BBDD de cada ensayo
    num_ensayos=0
    if lims1.get() is not None:
      num_ensayos=num_ensayos+1
    if lims2.get() is not None:
      num_ensayos=num_ensayos+1 
    if lims3.get() is not None:
      num_ensayos=num_ensayos+1
    if lims4.get() is not None:
      num_ensayos=num_ensayos+1
    if lims5.get() is not None:
      num_ensayos=num_ensayos+1
    if lims6.get() is not None:
      num_ensayos=num_ensayos+1
    if lims7.get() is not None:
      num_ensayos=num_ensayos+1 
    if lims8.get() is not None:
      num_ensayos=num_ensayos+1
    if lims9.get() is not None:
      num_ensayos=num_ensayos+1
    #num_ensayos almacena cuantas muestras se han hecvho en cada ensayo, cuantos numeros de lims se han aportado

    miconexion=sqlite3.connect("D:\\tempcontrol.db")
    micursor=miconexion.cursor()
    datos=tipoEnsayo.get(),cal.get_date(),sensor.get(),cubeta.get(),lims1.get(),lims2.get(),lims3.get(),lims4.get(),lims5.get(),lims6.get(),lims7.get(),lims8.get(),lims9.get(),control.get(),analista.get(),textoComentario.get("1.0",END),num_ensayos
    try:
      micursor.execute("INSERT INTO ensayos VALUES(NULL,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,?)",(datos))
      miconexion.commit()
      messagebox.showinfo("Atencion","Registro creado con éxito ")
    except:
      messagebox.showerror("Error","No se ha podido insertar en la base de datos")  
    finally:
      micursor.close()
      miconexion.close()
    ventanaEnsayos.destroy()  
    leertemp(tipoEnsayo.get())  

  #botones en el grid de abajo
  def cancela():
    ventanaEnsayos.destroy()

  miFrame2=Frame(ventanaEnsayos)
  miFrame2.pack()
  botonNuevo=Button(miFrame2, text="Insertar datos y comenzar el ensayo", command=insertarEnsayo)
  botonNuevo.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  #botonDelet=Button(miFrame2, text="Eliminar ensayo", command=eliminarEnsayo)
  #botonDelet.grid(row=1, column=1, sticky="e", padx=10, pady=10)
  botonLimpiar=Button(miFrame2, text="Resetear formulario", command=limpiarcamposEnsayo)
  botonLimpiar.grid(row=1, column=2, sticky="e", padx=10, pady=10)
  botonEdit=Button(miFrame2, text="Cancelar", command=cancela)
  botonEdit.grid(row=1, column=3, sticky="e", padx=10, pady=10)
  
  ventanaEnsayos.mainloop()

###################################################################################################


def ventanaDatosEnsayo(a):
  #campos de los ensayos
  ventanaDatosEnsayo=Toplevel(root)
  ventanaDatosEnsayo.config(cursor="hand2")
  ventanaDatosEnsayo.geometry("630x850")
  ventanaDatosEnsayo.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaDatosEnsayo.title("Datos del Ensayos")
  campos=Frame(ventanaDatosEnsayo)
  campos.pack() 
  IdSeleccionada=a
  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  try:
    micursor.execute("SELECT * FROM ensayos WHERE Id="+str(IdSeleccionada))
    miconexion.commit()
    datos= micursor.fetchall()
    for row in datos:  
      tipoensayo=row[1]
      fecha=row[2]
      sensor=row[3]
      cubeta=row[4]
      lims1=row[5] 
      lims2=row[6]
      lims3=row[7]
      lims4=row[8]
      lims5=row[9]
      lims6=row[10] 
      lims7=row[11]
      lims8=row[12]
      lims9=row[13]
      control=row[14]
      analista=row[15] 
      textoComentario=row[16]
      num_medidas=row[17]
      mal_up=row[18]
      mal_down=row[19]
      media=row[20] 
      max=row[21]
      min=row[22]
      fuerarango=row[23]
      factor=row[24]
      incert=row[25]
  except:
    messagebox.showerror("Error","error de base de datos")  
  finally:
    micursor.close()
    miconexion.close()

  # labels de los cuadros
  tipoLabel=Label(campos, text="Tipo ensayo: "+str(tipoensayo))
  tipoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)

  cubetaLabel=Label(campos, text="Cubeta sensor: "+str(cubeta))
  cubetaLabel.grid(row=2, column=0, sticky="e", padx=10, pady=10)
  sensorLabel=Label(campos, text="Sensor:  "+str(sensor))
  sensorLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  lims1Label=Label(campos, text="Num Lims cubeta 1:  "+str(lims1))
  lims1Label.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  lims2Label=Label(campos, text="Num Lims cubeta 2: "+str(lims2))
  lims2Label.grid(row=5, column=0, sticky="e", padx=10, pady=10)
  lims3Label=Label(campos, text="Num Lims cubeta 3: "+str(lims3))
  lims3Label.grid(row=6, column=0, sticky="e", padx=10, pady=10)
  lims4Label=Label(campos, text="Num Lims cubeta 4: "+str(lims4))
  lims4Label.grid(row=7, column=0, sticky="e", padx=10, pady=10)
  lims5Label=Label(campos, text="Num Lims cubeta 5: "+str(lims5))
  lims5Label.grid(row=8, column=0, sticky="e", padx=10, pady=10)
  lims6Label=Label(campos, text="Num Lims cubeta 6: "+str(lims6))
  lims6Label.grid(row=9, column=0, sticky="e", padx=10, pady=10)
  lims7Label=Label(campos, text="Num Lims cubeta 7: "+str(lims7))
  lims7Label.grid(row=10, column=0, sticky="e", padx=10, pady=10)
  lims8Label=Label(campos, text="Num Lims cubeta 8: "+str(lims8))
  lims8Label.grid(row=11, column=0, sticky="e", padx=10, pady=10)
  lims9Label=Label(campos, text="Num Lims cubeta 9: "+str(lims9))
  lims9Label.grid(row=12, column=0, sticky="e", padx=10, pady=10)

  controlLabel=Label(campos, text="Controles: "+str(control))
  controlLabel.grid(row=13, column=0, sticky="e", padx=10, pady=10)
  analistaLabel=Label(campos, text="Analista: "+str(analista))
  analistaLabel.grid(row=14, column=0, sticky="e", padx=10, pady=10)
  comentLabel=Label(campos, text="Observaciones: "+str(textoComentario))
  comentLabel.grid(row=15, column=0, sticky="e", padx=10, pady=10)
  
  IdLabel=Label(campos, text="Id: "+str(IdSeleccionada))
  IdLabel.grid(row=1, column=1, sticky="e", padx=10, pady=10)
  fechaLabel=Label(campos, text="fecha: "+datetime.datetime.strftime(datetime.datetime.strptime(fecha,"%Y-%m-%d"),"%d-%m-%Y"))
  fechaLabel.grid(row=2, column=1, sticky="e", padx=10, pady=10)
  mediaLabel=Label(campos, text="media: "+str(media))
  mediaLabel.grid(row=3, column=1, sticky="e", padx=10, pady=10)

  maxLabel=Label(campos, text="temp. max: "+str(max))
  maxLabel.grid(row=4, column=1, sticky="e", padx=10, pady=10)
  minLabel=Label(campos, text="temp min: "+str(min))
  minLabel.grid(row=5, column=1, sticky="e", padx=10, pady=10)
  fuerarangoLabel=Label(campos, text="valores fuera rango: "+str(fuerarango))
  fuerarangoLabel.grid(row=6, column=1, sticky="e", padx=10, pady=10)

  medidasLabel=Label(campos, text="num_ medidas: "+str(num_medidas))
  medidasLabel.grid(row=7, column=1, sticky="e", padx=10, pady=10)
  malupLabel=Label(campos, text="valores mal por arriba: "+str(mal_up))
  malupLabel.grid(row=8, column=1, sticky="e", padx=10, pady=10)
  maldownLabel=Label(campos, text="valores mal por abajo: "+str(mal_down))
  maldownLabel.grid(row=9, column=1, sticky="e", padx=10, pady=10)
  factorLabel=Label(campos, text="Factor corrector: "+str(factor))
  factorLabel.grid(row=10, column=1, sticky="e", padx=10, pady=10)
  incerLabel=Label(campos, text="Incertidumbre: "+str(incert))
  incerLabel.grid(row=11, column=1, sticky="e", padx=10, pady=10)


  #botones en el grid de abajo
  def cancela():
    ventanaDatosEnsayo.destroy()

  miFrame2=Frame(ventanaDatosEnsayo)
  miFrame2.pack()
  botonEdit=Button(miFrame2, text="Cerrar", command=cancela)
  botonEdit.grid(row=1, column=3, sticky="e", padx=10, pady=10)
  
  ventanaDatosEnsayo.mainloop()


####################################################################################################


def ventanaEditarEnsayos(k):
  #campos de los ensayos
 
  def limpiarcamposEnsayo():
    #fechas.set("")
    sensor.set("")
    cubeta.set("")
    tipoEnsayo.set("DQO")
    analista.set("")
    control.set("")
    lims1.set("")
    lims2.set("")
    lims3.set("")
    lims4.set("")
    lims5.set("")
    lims6.set("")
    lims7.set("")
    lims8.set("")
    lims9.set("")
    textoComentario.delete(1.0,END)

  def cancela():
      ventanaEdEnsayos.destroy()
  
  ventanaEdEnsayos=Toplevel(root)
  ventanaEdEnsayos.config(cursor="hand2")
  ventanaEdEnsayos.geometry("630x900")
  ventanaEdEnsayos.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  ventanaEdEnsayos.title("Edición de ensayos")
  campos=Frame(ventanaEdEnsayos)
  campos.pack()
  fechas=StringVar(value=time.strftime("%Y-%m-%d"))
  sensor=StringVar(value="SENS1")
  cubeta=IntVar()
  tipoEnsayo=StringVar(value="DQO")
  lims1=IntVar()
  lims2=IntVar()
  lims3=IntVar()
  lims4=IntVar()
  lims5=IntVar()
  lims6=IntVar()
  lims7=IntVar()
  lims8=IntVar()
  lims9=IntVar()
  analista=StringVar()
  control=StringVar()
  #num_ensayos=IntVar()
  
  rb1=Radiobutton(campos, text="DQO",  value="DQO", variable=tipoEnsayo)
  rb1.grid(column=1, row=0)
  rb2=Radiobutton(campos, text="Mat. susp.", value="Mat", variable=tipoEnsayo)
  rb2.grid(column=2,row=0)
  #cuadroFecha=Entry(campos, textvariable=fechas)
  #cuadroFecha.grid(row=1, column=1, padx=10, pady=10)
  spin=Spinbox(campos, from_=0, to=9, width=1, textvariable=cubeta)
  spin.grid(row=2, column=1)
  cuadrosensor=Entry(campos, textvariable=sensor)
  cuadrosensor.grid(row=3, column=1, padx=10, pady=10)
  cuadrolims1=Entry(campos, textvariable=lims1)  
  cuadrolims1.grid(row=4, column=1, padx=10, pady=10)
  cuadrolims2=Entry(campos, textvariable=lims2)  
  cuadrolims2.grid(row=5, column=1, padx=10, pady=10)
  cuadrolims3=Entry(campos, textvariable=lims3)  
  cuadrolims3.grid(row=6, column=1, padx=10, pady=10)
  cuadrolims4=Entry(campos, textvariable=lims4)  
  cuadrolims4.grid(row=7, column=1, padx=10, pady=10)
  cuadrolims5=Entry(campos, textvariable=lims5)  
  cuadrolims5.grid(row=8, column=1, padx=10, pady=10)
  cuadrolims6=Entry(campos, textvariable=lims6)  
  cuadrolims6.grid(row=9, column=1, padx=10, pady=10)
  cuadrolims7=Entry(campos, textvariable=lims7)  
  cuadrolims7.grid(row=10, column=1, padx=10, pady=10)
  cuadrolims8=Entry(campos, textvariable=lims8)  
  cuadrolims8.grid(row=11, column=1, padx=10, pady=10)
  cuadrolims9=Entry(campos, textvariable=lims9)  
  cuadrolims9.grid(row=12, column=1, padx=10, pady=10)
  cuadroctrl=Entry(campos, textvariable=control)  
  cuadroctrl.grid(row=13, column=1, padx=10, pady=10)
  cuadroanalista=Entry(campos, textvariable=analista)  
  cuadroanalista.grid(row=14, column=1, padx=10, pady=10)
  textoComentario=Text(campos, width=16, height=4)
  textoComentario.grid(row=15, column=1, padx=10, pady=10)
  scrollVert=Scrollbar(campos, command=textoComentario.yview)
  scrollVert.grid(row=15, column=2, sticky="nsew")
  textoComentario.config(yscrollcommand=scrollVert.set)
  # labels de los cuadros
  tipoLabel=Label(campos, text="Tipo ensayo:")
  tipoLabel.grid(row=0, column=0, sticky="e", padx=10, pady=5)
  #fechaLabel=Label(campos, text="Fecha:")
  #fechaLabel.grid(row=1, column=0, sticky="e", padx=10, pady=5)
  cubetaLabel=Label(campos, text="Cubeta sensor:")
  cubetaLabel.grid(row=2, column=0, sticky="e", padx=10, pady=10)
  sensorLabel=Label(campos, text="Sensor:")
  sensorLabel.grid(row=3, column=0, sticky="e", padx=10, pady=10)
  lims1Label=Label(campos, text="Num Lims cubeta 1:")
  lims1Label.grid(row=4, column=0, sticky="e", padx=10, pady=10)
  lims2Label=Label(campos, text="Num Lims cubeta 2:")
  lims2Label.grid(row=5, column=0, sticky="e", padx=10, pady=10)
  lims3Label=Label(campos, text="Num Lims cubeta 3:")
  lims3Label.grid(row=6, column=0, sticky="e", padx=10, pady=10)
  lims4Label=Label(campos, text="Num Lims cubeta 4:")
  lims4Label.grid(row=7, column=0, sticky="e", padx=10, pady=10)
  lims5Label=Label(campos, text="Num Lims cubeta 5:")
  lims5Label.grid(row=8, column=0, sticky="e", padx=10, pady=10)
  lims6Label=Label(campos, text="Num Lims cubeta 6:")
  lims6Label.grid(row=9, column=0, sticky="e", padx=10, pady=10)
  lims7Label=Label(campos, text="Num Lims cubeta 7:")
  lims7Label.grid(row=10, column=0, sticky="e", padx=10, pady=10)
  lims8Label=Label(campos, text="Num Lims cubeta 8:")
  lims8Label.grid(row=11, column=0, sticky="e", padx=10, pady=10)
  lims9Label=Label(campos, text="Num Lims cubeta 9:")
  lims9Label.grid(row=12, column=0, sticky="e", padx=10, pady=10)
  controlLabel=Label(campos, text="Controles:")
  controlLabel.grid(row=13, column=0, sticky="e", padx=10, pady=10)
  analistaLabel=Label(campos, text="Analista:")
  analistaLabel.grid(row=14, column=0, sticky="e", padx=10, pady=10)
  comentLabel=Label(campos, text="Observaciones:")
  comentLabel.grid(row=15, column=0, sticky="e", padx=10, pady=10)
  #lee datos en BBDD de cada ensayo
  answer=k

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  try:
    micursor.execute("SELECT * FROM ensayos WHERE Id="+str(answer))
    miconexion.commit()
    a=micursor.fetchall()
      #ventanaEdEnsayos.destroy()

    for dato in a:    
      tipoEnsayo.set(dato[1])
      fechas=dato[2]
      sensor.set(dato[3])
      cubeta.set(dato[4])
      lims1.set(dato[5])
      lims2.set(dato[6])
      lims3.set(dato[7])
      lims4.set(dato[8])
      lims5.set(dato[9])
      lims6.set(dato[10])
      lims7.set(dato[11])
      lims8.set(dato[12])
      lims9.set(dato[13])
      control.set(dato[14])
      analista.set(dato[15])
      textoComentario.insert(1.0,dato[16])
      
  except:
    messagebox.showerror("Atencion","Error BBDD") 
  finally:
    micursor.close()
    miconexion.close()
  ano=datetime.datetime.strftime(datetime.datetime.strptime(fechas,"%Y-%m-%d"),"%Y")
  mes=datetime.datetime.strftime(datetime.datetime.strptime(fechas,"%Y-%m-%d"),"%m")
  dia=datetime.datetime.strftime(datetime.datetime.strptime(fechas,"%Y-%m-%d"),"%d")
  #dia=time.strftime("%d")
  cal=DateEntry(ventanaEdEnsayos,width=12, year=int(ano), month=int(mes),day=int(dia), background='darkblue', foreground='white', borderwidth=2)
  cal.pack(padx=10, pady=10)


  def actualizarDatos():
    #inserta datos en BBDD de cada ensayo

    num_ensayos=0
    if lims1.get() is not None:
      num_ensayos=num_ensayos+1
    if lims2.get() is not None:
      num_ensayos=num_ensayos+1 
    if lims3.get() is not None:
      num_ensayos=num_ensayos+1
    if lims4.get() is not None:
      num_ensayos=num_ensayos+1
    if lims5.get() is not None:
      num_ensayos=num_ensayos+1
    if lims6.get() is not None:
      num_ensayos=num_ensayos+1
    if lims7.get() is not None:
      num_ensayos=num_ensayos+1 
    if lims8.get() is not None:
      num_ensayos=num_ensayos+1
    if lims9.get() is not None:
      num_ensayos=num_ensayos+1
    #num_ensayos almacena cuantas muestras se han hecvho en cada ensayo, cuantos numeros de lims se han aportado



    miconexion=sqlite3.connect("D:\\tempcontrol.db")
    micursor=miconexion.cursor()
    datos=tipoEnsayo.get(),cal.get_date(),sensor.get(),cubeta.get(),lims1.get(),lims2.get(),lims3.get(),lims4.get(),lims5.get(),lims6.get(),lims7.get(),lims8.get(),lims9.get(),control.get(),analista.get(),textoComentario.get("1.0",END),num_ensayos 
    

    
    try:
      micursor.execute("UPDATE ensayos SET tipo=?, fecha=?, sensor=?, cubeta=?, lims1=?, lims2=?, lims3=?, lims4=?, lims5=?, lims6=?, lims7=?, lims8=?, lims9=?, control=?, analista=?, comentario=?, num_ensayos=? "+ " WHERE Id="+str(answer),(datos))
      miconexion.commit()
      messagebox.showinfo("Atencion","Registro creado con éxito ")
    except:
      messagebox.showerror("Error","No se ha podido insertar en la base de datos")  
    finally:
      micursor.close()
      miconexion.close()
      ventanaEdEnsayos.destroy()
  miFrame2=Frame(ventanaEdEnsayos)
  miFrame2.pack()
  botonNuevo=Button(miFrame2, text="Confirmar actualización de Id "+str(answer), command=actualizarDatos)
  botonNuevo.grid(row=1, column=0, sticky="e", padx=10, pady=10)

  botonLimpiar=Button(miFrame2, text="Resetear formulario", command=limpiarcamposEnsayo)
  botonLimpiar.grid(row=1, column=2, sticky="e", padx=10, pady=10)
  botonEdit=Button(miFrame2, text="Cancelar", command=cancela)
  botonEdit.grid(row=1, column=3, sticky="e", padx=10, pady=10)
  
  ventanaEdEnsayos.mainloop()


####################################################################################################



def salirAplicacion():
	valor=messagebox.askquestion("salir", "Deseas salir de verdad?")
	if valor=="yes":
		root.destroy()
	
##################################################################################################
  
def license():
  messagebox.showinfo("Licencia", "Do what the fuck you want to public license.")

def acercade():
  messagebox.showinfo("Acerca de...", "Programa desarrollado por Oscar Unzueta 2019. Versión 1.0 beta")


def ayuda():
  messagebox.showinfo("Ayuda", "Para el cálculo de los valores fuera de escala se usa la temperatura corregida con el factor corrector > ó < que el limite de cuantificación del sensor (no se aplica incertidumbre)  Para el cálculo de los valores de temperatura incorrectos si se tienen en cuenta la incertidumbre, el factor corrector y la tolerancia")  

####################################################################################################  

def detenerArduino():    
    #messagebox.showinfo("xxxx","ggggg")
    sTemp=10000
    #hilo2.join()
    #ventanaLectura.destroy

def leertemp(a):
  refrescar()
  if a=="DQO":
    factor=factor150
    tiempoEnsayo=duraciondqo
    incertidumbre=u150
    temperaturaCorrecta=tempokDQO
    tolerancia=toleranciaDQO
  if a=="Mat":
    factor=factor150
    tiempoEnsayo=duracionCN
    incertidumbre=uMatSusp
    temperaturaCorrecta=tempcn
    tolerancia=toleranciaCN
  ventanaLectura=Toplevel(root)
  ventanaLectura.config(cursor="pirate")
  ventanaLectura.geometry("800x500")
  ventanaLectura.iconbitmap('C:\\Users\\Gorbe\\OneDrive\\Documentos\\mitermo.ico')
  if a=="DQO":
    ventanaLectura.title("Leyendo datos del sensor DQO. ( factor corr= "+str(factor)+" / Incert.= "+str(incertidumbre)+") durante "+str(tiempoEnsayo)+"min ...")
  if a=="Mat":
    ventanaLectura.title("Leyendo datos del sensor Mat. susp ( factor corr= "+str(factor)+" / Incert.= "+str(incertidumbre)+") durante "+str(tiempoEnsayo)+"min ...")


  botonera=Frame(ventanaLectura)
  botonera.pack()

  progressbar=ttk.Progressbar(botonera,orient="horizontal", length=30, mode="determinate")
  progressbar.grid(row=0, column=0, sticky="e", padx=10, pady=10)
  botonmedida=Button(botonera, text="XXX", command=detenerArduino)
  botonmedida.grid(row=1, column=0, sticky="e", padx=10, pady=10)
  botonDatos=Button(botonera, text="XXX")
  botonDatos.grid(row=2, column=0, sticky="e", padx=10, pady=10)

  campos=Frame(ventanaLectura)
  campos.pack()

  R= Frame(campos, width=500, height=350, bd=8, relief="raise")
  R.pack(side=RIGHT)
  scrollbary = Scrollbar(R, orient=VERTICAL)
  scrollbarx = Scrollbar(R, orient=HORIZONTAL)
  tree = ttk.Treeview(R, columns=( "hora","temperatura","temp_corregida","margen","malas"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=tree.yview)
  scrollbary.pack(side=RIGHT, fill=Y)
  scrollbarx.config(command=tree.xview)
  scrollbarx.pack(side=BOTTOM, fill=X)
  tree.heading('hora', text="hora", anchor=W)
  tree.heading('temperatura', text="temperatura", anchor=W)
  tree.heading('temp_corregida', text="temp_corregida", anchor=W)
  tree.heading('margen', text="margen", anchor=W)
  tree.heading('malas', text="malas", anchor=W)
  tree.column('#0', stretch=NO, minwidth=0, width=10)
  tree.column('#1', stretch=NO, minwidth=70, width=90)
  tree.column('#2', stretch=NO, minwidth=80, width=95)
  tree.column('#3', stretch=NO, minwidth=70, width=80)
  tree.column('#4', stretch=NO, minwidth=0, width=50)
  tree.pack()
  tree.delete(*tree.get_children())

  def visualiza():
    refrescar()
    
    fichero=open('C:/Program Files/Python37/informe_sensores.csv','a') 
    conex=sqlite3.connect("D:\\tempcontrol.db")
    cursor1=conex.cursor() 
    #inicio=time.time()  
    tiempo=0
    malas=""
    #factorx=0
    #now = time.time()
    #ahora=datetime.now()
    contadorIncumplimientos=0
    incumplimientosAbajo=0
    incumplimientosArriba=0
    incumplerangosup=0
    incumplerangoinf=0
    lecturas=0
    maxvalue=tiempoEnsayo*60
    
    currentvalue=0
    def progress(currentvalue):
      progressbar["value"]=currentvalue
    
    #cursorCalibracion=conex.cursor()
    #cursorCalibracion.execute("SELECT * FROM calibracion where fecha=(SELECT MAX(fecha) from calibracion)") 
    cursorId=conex.cursor()
    cursorId.execute("SELECT MAX(Id) from ensayos ")
    conex.commit()
    #CalibracionActual=cursorCalibracion.fetchall()
    #for factor in CalibracionActual:
      #factorx=factor[5]
   
    miId=cursorId.fetchone()
    cursorId.close()
    #cursorCalibracion.close()  
    
    TempMin=float(sTemp)
    TempMin=TempMin+factor  
    TempMax=float(sTemp)
    TempMax=TempMax+factor

    progressbar["value"]=currentvalue
    progressbar["maximum"]=maxvalue
    divisions=2   # barra progreso
    
    temp_acumulado=0
    while tiempo<(tiempoEnsayo*60) and sTemp!="1000":
      time.sleep(2) 
      tiempo=tiempo+2
      if float(sTemp)>999:
        cursor1.close()
        conex.close()
        break
      lecturas=lecturas+1
      corregida=float(sTemp)+factor
      temp_acumulado=temp_acumulado+corregida
      temperaturaTopeDown=(temperaturaCorrecta+factor)-tolerancia-incertidumbre
      temperaturaTopeUp=(temperaturaCorrecta+factor)+tolerancia+incertidumbre

      if corregida<TempMin:
        TempMin=corregida
      if corregida>TempMax:
        TempMax=corregida
      if corregida < temperaturaTopeDown:
        contadorIncumplimientos=contadorIncumplimientos+1
        incumplimientosAbajo=incumplimientosAbajo+1
      if corregida > temperaturaTopeUp:       
        contadorIncumplimientos=contadorIncumplimientos+1
        incumplimientosArriba=incumplimientosArriba+1
      if corregida < rangoin:
        incumplerangoinf=incumplerangoinf+1  
      if corregida > rangosu:
        incumplerangosup=incumplerangosup+1
      if corregida > temperaturaCorrecta+tolerancia or corregida<temperaturaCorrecta-tolerancia:
        malas="mal"
      tree.insert('', 'end', values=(hora,float(sTemp),float(corregida),float(corregida-temperaturaCorrecta),malas ))
      malas=""
      
      currentvalue=currentvalue+2
      progress(currentvalue)
      
      botonmedida["text"]="Crono: "+str(tiempo)+" / Temperatura actual: "+str(sTemp)+"ºC / Corregida : "+str(corregida)+"ºC / Temp min: "+str(TempMin)+"ºC  /  Temp max: "+str(TempMax)+"ºC /  No conformidades= "+str(contadorIncumplimientos)
      botonDatos["text"]="Factor corrector: "+str(factor)+" / Temperatura max admisible = "+str(temperaturaTopeUp)+" /  Temp minima admisible = "+str(temperaturaTopeDown)
      progressbar.update()
      ventanaLectura.update()
      
      datos=miId[0],hora,sTemp,corregida  
      fichero.write(str(miId[0])+","+str(hoy)+","+str(hora)+','+str(sTemp)+","+str(corregida)+'\n')              
      cursor1.execute("INSERT INTO temperaturas (Id,hora,temperatura,corregida) VALUES ( ?,?,?,?)",(datos))
      conex.commit()
    media=temp_acumulado/lecturas
    #factorcorrector=factor150
    #incertidumbre=u150
    datos=lecturas,incumplimientosArriba,incumplimientosAbajo,media,TempMax,TempMin,incumplerangoinf+incumplerangosup,factor,incertidumbre
    cursor1.execute("UPDATE ensayos SET num_medidas=?, mal_up=?, mal_down=?, media=?, max=?, min=?, fuerarango=?, factorcorrector=?, incertidumbre=? WHERE Id="+str(miId[0]),(datos)) ##################
    conex.commit()
    cursor1.close()
    conex.close()  
    fichero.close()
    ventanaLectura.destroy()
    messagebox.showinfo("info","Fin del ensayo "+str(miId[0])+" en "+str(int(tiempo)/60)+" minutos. Los valores no conformes han sido "+str(contadorIncumplimientos)+" / Medidas fuera de rango: "+str(incumplerangoinf+incumplerangosup))
  hilo2 = threading.Thread(target=visualiza)
  hilo2.start()
 
  ventanaLectura.mainloop()   
   
    
###########################################################################################################
def hiloaArduino():
  global flag
  if flag!="reading":
    flag="reading"
    thread1 = threading.Thread(target=arduino, daemon=TRUE)
    thread1.start()
  

def tablas():

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  micursor=miconexion.cursor()
  try:
    micursor.execute('''    CREATE TABLE IF NOT EXISTS config (    diascalibracion integer,    rangosup real,    rangoinf real,    factorCobertura real,    intervalomedida integer,    duracionDQO integer,    duracionCN integer,    tempDQO integer,    tempCN integer,   aceptacionDQO real, aceptacionCN real   );''')  
    micursor.execute('''    CREATE TABLE IF NOT EXISTS ensayos (    Id INTEGER PRIMARY KEY AUTOINCREMENT,    tipo text,    fecha text ,    sensor text,    cubeta integer,    lims1 integer,    lims2 integer,    lims3 integer,    lims4 integer,    lims5 integer,    lims6 integer,    lims7 integer,    lims8 integer,    lims9 integer,    control text,    analista text,    comentario text, num_medidas integer, mal_up integer, mal_down integer, media real, max, real, min real, fuerarango integer, factorcorrector real, incertidumbre real, num_ensayos integer  );''')
    micursor.execute('''    CREATE TABLE IF NOT EXISTS historial (    Id INTEGER PRIMARY KEY AUTOINCREMENT,    fecha text,    sensor text,    operacion text,    operario text,    estado text,    comentario text    );''')
    micursor.execute('''    CREATE TABLE IF NOT EXISTS calibracion (    Id INTEGER PRIMARY KEY AUTOINCREMENT,    fecha text,    sensor text,    operario text,    factorMatSusp real,    factor150 real, uMatSusp real, u150 real,   comentario text    );''')
    micursor.execute('''    CREATE TABLE IF NOT EXISTS temperaturas (    Id INTEGER,    hora text,     temperatura real     );''')
    miconexion.commit()
    messagebox.showinfo("Tablas de ensayos creadas con éxito")  
  except:
    messagebox.showwarning("Atención, Error en creacion de tablas.")
  finally:
    micursor.close()
    miconexion.close()

###############################################################################################################

def informeGlobal():

  miconexion=sqlite3.connect("D:\\tempcontrol.db")
  cursorMalas=miconexion.cursor()
  cursorNumEnsayos=miconexion.cursor()
  
  try:
    cursorMalas.execute("SELECT COUNT(*) FROM ensayos WHERE (mal_up+mal_down)>0")
    cursorNumEnsayos.execute("SELECT SUM(num_ensayos) FROM ensayos")
    miconexion.commit()
    datos= cursorMalas.fetchone()
    #for row in datos:  
      #malos=row[0]
    malos=datos[0]  
    datos=cursorNumEnsayos.fetchone()
    numerodeensayos=datos[0]  
  except:
    messagebox.showerror("Error","Error")    
  finally:
    cursorMalas.close()
    cursorNumEnsayos.close()
    miconexion.close()  
  messagebox.showinfo("Informe global","En la Base de datos hay "+str(malos)+" registros con valores no conformes. El número de muestras registradas son "+str(numerodeensayos))

######################################################################################################
# interfaz grafica general de la aplicacion
#menu superior
barraMenu=Menu(root)
root.config(menu=barraMenu, width=800, heigh=500)
ensayosMenu=Menu(barraMenu, tearoff=0)
ensayosMenu.add_command(label="Iniciar Ensayo", command=ventanaEnsayos)
ensayosMenu.add_command(label="Ver ensayosMenu", command=muestraEnsayos)
ensayosMenu.add_command(label="Informe global", command=informeGlobal)
ensayosMenu.add_command(label="Conectar con sensor" , command=hiloaArduino)
ensayosMenu.add_command(label="Ver temperaturas" , command=muestraEnsayos)
ensayosMenu.add_separator()
ensayosMenu.add_command(label="Personalizar", command=ventanaConfig)
ensayosMenu.add_command(label="Salir", command=salirAplicacion)

SensoresMenu=Menu(barraMenu, tearoff=0)
SensoresMenu.add_command(label="Estado sensor", command=ventanaEstadoSensor)
SensoresMenu.add_separator()

SensoresMenu.add_command(label="Ver calibraciones", command=muestraCalibracion)
SensoresMenu.add_command(label="Calibrar sensor", command=ventanacalibracion)
SensoresMenu.add_separator()

SensoresMenu.add_command(label="Ver historial sensor", command=muestraHistorial )

SensoresMenu.add_command(label="Añadir incidencia sensor", command=ventanaHistory)
SensoresMenu.add_separator()

SensoresMenu.add_command(label="Ver ficha equipo sensor", command=certificado)
SensoresMenu.add_command(label="Ver ficha equipo digestor", command=digestor)
SensoresMenu.add_command(label="Ver PNT ensayo", command=pnt)

archivoMenu=Menu(barraMenu, tearoff=0)
archivoMenu.add_command(label="Exportar")
archivoMenu.add_command(label="Importar")
archivoMenu.add_command(label="Imprimir")
archivoMenu.add_separator()
archivoMenu.add_command(label="Hacer copia seguridad")
archivoMenu.add_command(label="Configurar copias de seguridad")
archivoMenu.add_command(label="Cargar copia de seguridad")
archivoMenu.add_command(label="Regenerar tablas", command=tablas)

VistasMenu=Menu(barraMenu, tearoff=0)
VistasMenu.add_command(label="Ver ensayos", command=muestraEnsayos)
VistasMenu.add_command(label="Ver ensayos por num LIMS", command=ventanaEnsayos)
VistasMenu.add_command(label="Ver ensayos por fecha", command=ventanaEnsayos)
VistasMenu.add_command(label="Ver controles", command=ventanaEnsayos)
VistasMenu.add_command(label="Ver ensayos incorrectos", command=ventanaEnsayos)



ayudaMenu=Menu(barraMenu, tearoff=0)
ayudaMenu.add_command(label="Ayuda", command=ayuda)
ayudaMenu.add_command(label="Documentación técnica")
ayudaMenu.add_command(label="Licencia", command=license)
ayudaMenu.add_command(label="Acerca de esto", command=acercade)

barraMenu.add_cascade(label="Ensayos", menu=ensayosMenu)
barraMenu.add_cascade(label="Sensores", menu=SensoresMenu)
barraMenu.add_cascade(label="Vistas", menu=VistasMenu)
barraMenu.add_cascade(label="Archivo", menu=archivoMenu)
barraMenu.add_cascade(label="Ayuda", menu=ayudaMenu)


imagenh=PhotoImage(file="C:\\Users\\Gorbe\\OneDrive\\Documentos\\digestor.png")

imageLabel=Label(root, image=imagenh).place(x=2,y=3)

botonera=Frame(root)
botonera.pack()
botonConectar=Button(botonera, text="Establecer conexión con Arduino", command=hiloaArduino)
botonConectar.grid(row=1, column=0, sticky="e", padx=10, pady=10)
botonVerEnsayos=Button(botonera, text="Ver ensayos guardados", command=muestraEnsayos)
botonVerEnsayos.grid(row=1, column=1, sticky="e", padx=10, pady=10)
botonVerEstado=Button(botonera, text="Ver estado del equipo", command=ventanaEstadoSensor)
botonVerEstado.grid(row=2, column=0, sticky="e", padx=10, pady=10)
botonIniciar=Button(botonera, text="Iniciar un nuevo ensayo", command=ventanaEnsayos)
botonIniciar.grid(row=2, column=1, sticky="e", padx=10, pady=10)
botonVerTemperaturas=Button(botonera, text="Ver temperaturas", command=muestraEnsayos)
botonVerTemperaturas.grid(row=3, column=0, sticky="e", padx=10, pady=10)
botonVerCalibraciones=Button(botonera, text="Ver calibraciones", command=muestraCalibracion)
botonVerCalibraciones.grid(row=3, column=1, sticky="e", padx=10, pady=10)

botonConfig=Button(botonera, text="Configuración", command=ventanaConfig)
botonConfig.grid(row=4, column=0, sticky="e", padx=10, pady=10)
#for i in range(5):
    #for j in range(4):
       # l = Label(text='%d.%d' % (i, j), relief=RIDGE)
       # l.grid(row=i+1, column=j+1, sticky=NSEW)

root.mainloop()



